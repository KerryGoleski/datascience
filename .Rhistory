loop_start <- loop_start +1
Sys.sleep(1)
}
#Don't Tell Mom the Babysitter is Dead
print("The Dishes are done man")
#set up initial variables, gets number of rows
loop_start <-1
loop_stop <-as.integer(nrow(mydata))
#The function get_meta_content uses the variable xpath
xpath <- as.character("//meta[@property='og:title']")
#Here comes the loop
#for each row the url will get pulled an the resulting meta contetn will be added to column 11
for (i in loop_start:loop_stop){
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,11]] <- result_content
loop_count <- loop_count +1
Sys.sleep(3)
}
#Don't Tell Mom the Babysitter is Dead
print("The Dishes are done man")
print("The Dishes are done man" "Finished up to row: " loop_count)
print( "The Dishes are done man. I finished up to row: " loop_count )
cat("Current working dir: ", wd)
cat("Current working dir: ", loop_count)
cat("The Dishes are done man. I finished up to row:", loop_count)
#set up initial variables, gets number of rows
loop_start <-1
loop_count <-1
loop_stop <-as.integer(nrow(mydata))
#The function get_meta_content uses the variable xpath
xpath <- as.character("//meta[@property='og:title']")
#Here comes the loop
#for each row the url will get pulled an the resulting meta contetn will be added to column 11
for (i in 1:loop_stop){
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,11]] <- result_content
loop_start <- loop_start +1
loop_count <- loop_count +1
Sys.sleep(3)
}
#Don't Tell Mom the Babysitter is Dead
cat("The Dishes are done man. I finished up to row:", loop_count)
View(mydata)
mydata[[74,2]]
for (i in 74:loop_stop){
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,11]] <- result_content
loop_start <- loop_start +1
loop_count <- loop_count +1
Sys.sleep(3)
}
loop_start <- loop_start +1
loop_count <- loop_count +1
for (i in 74:loop_stop){
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,11]] <- result_content
loop_start <- loop_start +1
loop_count <- loop_count +1
Sys.sleep(3)
}
View(mydata)
mydata[[73,2]]
loop_count <-73
loop_start <-73
tryCatch()
tryCatch(
{
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,11]] <- result_content
},
error=function(cond){
message(paste("URL has and issue")
message(cond)
mydata[[loop_start,2]] <- as.character("ERROR")
},
warning=function(cond) {
message(paste("URL caused a warning:", url))
message("Here's the original warning message:")
message(cond)
mydata[[loop_start,2]] <- as.character("ERROR"
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
loop_start <- loop_start +1
loop_count <- loop_count +1
Sys.sleep(1)
}
)
new_column <- as.integer(11)
new_column <- 11
#set up initial variables, gets number of rows
loop_start <-1 #Which row to start on
loop_count <-1 #Not using anymore
loop_stop <-as.integer(nrow(mydata))
#The function get_meta_content uses the variable xpath
xpath <- as.character("//meta[@property='article:published_time']")
#Set the column for the new data
new_column <- 12
#Here comes the loop
#for each row the url will get pulled an the resulting meta contetn will be added to column 11
for (i in loop_start:loop_stop){
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,new_column]] <- result_content
loop_start <- loop_start +1
loop_count <- loop_count +1
Sys.sleep(1)
}
#Don't Tell Mom the Babysitter is Dead
cat("The Dishes are done man. I finished up to row:", loop_start)
#Eventually I need to add an if else error to skip 403 etc
mydata$pub_time <-0
#set up initial variables, gets number of rows
loop_start <-1 #Which row to start on
loop_count <-1 #Not using anymore
loop_stop <-as.integer(nrow(mydata))
#The function get_meta_content uses the variable xpath
xpath <- as.character("//meta[@property='article:published_time']")
#Set the column for the new data
new_column <- 12
#Here comes the loop
#for each row the url will get pulled an the resulting meta contetn will be added to column 11
for (i in loop_start:loop_stop){
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,new_column]] <- result_content
loop_start <- loop_start +1
loop_count <- loop_count +1
Sys.sleep(1)
}
#Don't Tell Mom the Babysitter is Dead
cat("The Dishes are done man. I finished up to row:", loop_start)
#Eventually I need to add an if else error to skip 403 etc
loop_count <- 74
loop_start <- 74
for (i in 74:loop_stop){
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,new_column]] <- result_content
loop_start <- loop_start +1
loop_count <- loop_count +1
Sys.sleep(1)
}
write.table(mydata, "meta_tags.csv", sep = ",")
save.image("~/data_science/1st Web Scrape Project.RData")
library(rvest)
mydata <- read.csv(top_100.csv)
mydata <- read.csv("top_100.csv")
#set up initial variables, gets number of rows
loop_start <-1 #Which row to start on
loop_count <-1 #Not using anymore
loop_stop <-as.integer(nrow(mydata))
#The function get_meta_content uses the variable xpath
xpath <- as.character("//meta[@property='og:title']")
#Set the column for the new data
new_column <- 11
#Here comes the loop
#for each row the url will get pulled an the resulting meta contetn will be added to column number set by the variable "new_column"
for (i in loop_start:loop_stop){
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,new_column]] <- result_content
loop_start <- loop_start +1
Sys.sleep(1) #Delay to prevent the server getting angry for requests
}
#Don't Tell Mom the Babysitter is Dead
cat("The Dishes are done man. I stopped on row:", loop_start)
#Eventually I need to add an Try Catch function to move through errors like 403 and 503
#For now if the loop dies it just spits the number it was working on
load("~/data_science/1st Web Scrape Project.RData")
View(mydata)
mydata <- read.csv("top_100.csv")
#set up initial variables, gets number of rows
loop_start <-1 #Which row to start on
loop_count <-1 #Not using anymore
loop_stop <-as.integer(nrow(mydata))
#The function get_meta_content uses the variable xpath
xpath <- as.character("//meta[@property='article:published_time']")
#Set the column for the new data
new_column <- 11
#Here comes the loop
#for each row the url will get pulled an the resulting meta contetn will be added to column 11
for (i in loop_start:loop_stop){
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,new_column]] <- result_content
loop_start <- loop_start +1
Sys.sleep(1) #Delay to prevent the server getting angry for requests
}
#Don't Tell Mom the Babysitter is Dead
cat("The Dishes are done man. I stopped on row:", loop_start)
#Eventually I need to add an Try Catch function to move through errors like 403 and 503
#For now if the loop dies it just spits the number it was working on
mydata$title <- as.character("unknown")
View(mydata)
#set up initial variables, gets number of rows
loop_start <-1 #Which row to start on
loop_count <-1 #Not using anymore
loop_stop <-as.integer(nrow(mydata))
#The function get_meta_content uses the variable xpath
xpath <- as.character("//meta[@property='article:published_time']")
#Set the column for the new data
new_column <- 11
#Here comes the loop
#for each row the url will get pulled an the resulting meta contetn will be added to column 11
for (i in loop_start:loop_stop){
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,new_column]] <- result_content
loop_start <- loop_start +1
Sys.sleep(1) #Delay to prevent the server getting angry for requests
}
#Don't Tell Mom the Babysitter is Dead
cat("The Dishes are done man. I stopped on row:", loop_start)
#Eventually I need to add an Try Catch function to move through errors like 403 and 503
#For now if the loop dies it just spits the number it was working on
#set up initial variables, gets number of rows
loop_start <-74 #Which row to start on
loop_count <-1 #Not using anymore
loop_stop <-as.integer(nrow(mydata))
#The function get_meta_content uses the variable xpath
xpath <- as.character("//meta[@property='article:published_time']")
#Set the column for the new data
new_column <- 11
#Here comes the loop
#for each row the url will get pulled an the resulting meta contetn will be added to column 11
for (i in loop_start:loop_stop){
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,new_column]] <- result_content
loop_start <- loop_start +1
Sys.sleep(1) #Delay to prevent the server getting angry for requests
}
#set up initial variables, gets number of rows
loop_start <-1 #Which row to start on
loop_count <-1 #Not using anymore
loop_stop <-as.integer(nrow(mydata))
#The function get_meta_content uses the variable xpath
xpath <- as.character("//meta[@property='og:title']")
#Set the column for the new data
new_column <- 11
#Here comes the loop
#for each row the url will get pulled an the resulting meta contetn will be added to column 11
for (i in loop_start:loop_stop){
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,new_column]] <- result_content
loop_start <- loop_start +1
Sys.sleep(1) #Delay to prevent the server getting angry for requests
}
#Don't Tell Mom the Babysitter is Dead
cat("The Dishes are done man. I stopped on row:", loop_start)
#Eventually I need to add an Try Catch function to move through errors like 403 and 503
#For now if the loop dies it just spits the number it was working on
#set up initial variables, gets number of rows
loop_start <-74 #Which row to start on
loop_count <-1 #Not using anymore
loop_stop <-as.integer(nrow(mydata))
#The function get_meta_content uses the variable xpath
xpath <- as.character("//meta[@property='og:title']")
#Set the column for the new data
new_column <- 11
#Here comes the loop
#for each row the url will get pulled an the resulting meta contetn will be added to column 11
for (i in loop_start:loop_stop){
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,new_column]] <- result_content
loop_start <- loop_start +1
Sys.sleep(1) #Delay to prevent the server getting angry for requests
}
#Don't Tell Mom the Babysitter is Dead
cat("The Dishes are done man. I stopped on row:", loop_start)
#Eventually I need to add an Try Catch function to move through errors like 403 and 503
#For now if the loop dies it just spits the number it was working on
#set up initial variables, gets number of rows
loop_start <-111 #Which row to start on
loop_count <-1 #Not using anymore
loop_stop <-as.integer(nrow(mydata))
#The function get_meta_content uses the variable xpath
xpath <- as.character("//meta[@property='og:title']")
#Set the column for the new data
new_column <- 11
#Here comes the loop
#for each row the url will get pulled an the resulting meta contetn will be added to column 11
for (i in loop_start:loop_stop){
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,new_column]] <- result_content
loop_start <- loop_start +1
Sys.sleep(1) #Delay to prevent the server getting angry for requests
}
#Don't Tell Mom the Babysitter is Dead
cat("The Dishes are done man. I stopped on row:", loop_start)
#Eventually I need to add an Try Catch function to move through errors like 403 and 503
#For now if the loop dies it just spits the number it was working on
for (i in loop_start:loop_stop){
tryCatch(
{
# Just to highlight: if you want to use more than one
# R expression in the "try" part then you'll have to
# use curly brackets.
# 'tryCatch()' will return the last evaluated expression
# in case the "try" part was completed successfully
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,new_column]] <- result_content
# The return value of `readLines()` is the actual value
# that will be returned in case there is no condition
# (e.g. warning or error).
# You don't need to state the return value via `return()` as code
# in the "try" part is not wrapped insided a function (unlike that
# for the condition handlers for warnings and error below)
},
error=function(cond) {
message(paste("URL does not seem to exist:", url))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
mydata[[loop_start,new_column]] <- as.character("Error")
},
warning=function(cond) {
message(paste("URL caused a warning:", url))
message("Here's the original warning message:")
message(cond)
# Choose a return value in case of warning
mydata[[loop_start,new_column]] <- as.character("Warning")
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
loop_start <- loop_start +1
Sys.sleep(1) #Delay to prevent the server getting angry for requests
}
)}
loop_start
View(mydata)
for (i in loop_start:loop_stop){
tryCatch(
{
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,new_column]] <- result_content
},
error=function(cond) {
message(paste("Problem with URL:", as.character(mydata[[loop_start,2]])))
message(paste("Error in row:", loop_start))
mydata[[loop_start,new_column]] <- as.character("Error")
},
warning=function(cond) {
message(paste("URL caused a warning:", url))
message("Here's the original warning message:")
message(cond)
mydata[[loop_start,new_column]] <- as.character("Warning")
},
finally={
loop_start <- loop_start +1
Sys.sleep(1) #Delay to prevent the server getting angry at too requests
}
)}
for (i in loop_start:loop_stop){
tryCatch(
{
# Just to highlight: if you want to use more than one
# R expression in the "try" part then you'll have to
# use curly brackets.
# 'tryCatch()' will return the last evaluated expression
# in case the "try" part was completed successfully
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,new_column]] <- result_content
message(paste( "Completed Row: ", loop_start))
# The return value of `readLines()` is the actual value
# that will be returned in case there is no condition
# (e.g. warning or error).
# You don't need to state the return value via `return()` as code
# in the "try" part is not wrapped insided a function (unlike that
# for the condition handlers for warnings and error below)
},
error=function(cond) {
message(paste("Problem with URL:", as.character(mydata[[loop_start,2]])))
message(paste("Error in row:", loop_start))
# Choose a return value in case of error
mydata[[loop_start,new_column]] <- as.character("Error")
},
warning=function(cond) {
message(paste("URL caused a warning:", as.character(mydata[[loop_start,2]])))
message("Here's the original warning message:")
message(cond)
# Choose a return value in case of warning
mydata[[loop_start,new_column]] <- as.character("Warning")
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
loop_start <- loop_start +1
Sys.sleep(1) #Delay to prevent the server getting angry at too requests
}
)}
for (i in loop_start:loop_stop){
tryCatch(
{
# Just to highlight: if you want to use more than one
# R expression in the "try" part then you'll have to
# use curly brackets.
# 'tryCatch()' will return the last evaluated expression
# in case the "try" part was completed successfully
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,new_column]] <- result_content
message(paste( "Completed Row: ", loop_start))
# The return value of `readLines()` is the actual value
# that will be returned in case there is no condition
# (e.g. warning or error).
# You don't need to state the return value via `return()` as code
# in the "try" part is not wrapped insided a function (unlike that
# for the condition handlers for warnings and error below)
},
error=function(cond) {
message(paste("Problem with URL:", as.character(mydata[[loop_start,2]])))
message(paste("Error in row:", loop_start))
# Choose a return value in case of error
mydata[[loop_start,new_column]] <- as.character("Error")
},
warning=function(cond) {
message(paste("URL caused a warning:", as.character(mydata[[loop_start,2]])))
message("Here's the original warning message:")
message(cond)
# Choose a return value in case of warning
mydata[[loop_start,new_column]] <- as.character("Warning")
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
loop_start <- loop_start +1
Sys.sleep(0.3) #Delay to prevent the server getting angry at too requests
}
)}
for (i in loop_start:loop_stop){
tryCatch(
{
# Just to highlight: if you want to use more than one
# R expression in the "try" part then you'll have to
# use curly brackets.
# 'tryCatch()' will return the last evaluated expression
# in case the "try" part was completed successfully
result_content <- as.character(get_meta_content(as.character(mydata[[loop_start,2]])))
mydata[[loop_start,new_column]] <- result_content
message(paste( "Completed Row: ", loop_start))
# The return value of `readLines()` is the actual value
# that will be returned in case there is no condition
# (e.g. warning or error).
# You don't need to state the return value via `return()` as code
# in the "try" part is not wrapped insided a function (unlike that
# for the condition handlers for warnings and error below)
},
error=function(cond) {
message(paste("Problem with URL:", as.character(mydata[[loop_start,2]])))
message(paste("Error in row:", loop_start))
# Choose a return value in case of error
mydata[[loop_start,new_column]] <- as.character("Error")
},
warning=function(cond) {
message(paste("URL caused a warning:", as.character(mydata[[loop_start,2]])))
message("Here's the original warning message:")
message(cond)
# Choose a return value in case of warning
mydata[[loop_start,new_column]] <- as.character("Warning")
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
loop_start <- loop_start +1
Sys.sleep(0.1) #Delay to prevent the server getting angry at too requests
}
)}
#Don't Tell Mom the Babysitter is Dead
cat("The Dishes are done man. I finished on row:", loop_start)
View(mydata)
write.csv(mydata, file = "top_1000-titles.csv", sep = ",")
get_meta_content("http://americamagazine.org/content/all-things/good-priest-plays-detective-grantchester")
as.character(get_meta_content("http://americamagazine.org/content/all-things/good-priest-plays-detective-grantchester"))
View(mydata)
mydata2 <- iconv(as.character(get_meta_content("http://americamagazine.org/content/all-things/good-priest-plays-detective-grantchester")))
test-data = data.frame(3,2,4)
test_data = data.frame(3,2,4)
test_data$x5 <- iconv(as.character(get_meta_content("http://americamagazine.org/content/all-things/good-priest-plays-detective-grantchester")))
write.csv(test_data, file="test_data.csv")
for (i in 1:1034){}
switch_count <- 1
for (i in 1:1034){
mydata[[switch_count,11]] <- iconv(mydata[[switch_count,11]])
}
write.csv(mydata, file = "top_1000-titles.csv")
view (get_meta_content)
fix (get_meta_content)
get_meta_content("http://thejesuitpost.org")
fix (get_meta_content)
get_meta_content(https://thejesuitpost.org/2016/07/interview-stand-against-trump-founder/)
get_meta_content("https://thejesuitpost.org/2016/07/interview-stand-against-trump-founder/")
get_meta_content("https://thejesuitpost.org/")
get_meta_content("http://thejesuitpost.org/")
get_meta_content("http://commonweal.org")
get_meta_content("https://www.commonwealmagazine.org/presidential-popularity-problem")
get_meta_content("http://aleteia.org/2016/07/18/if-we-reconsider-every-life-who-will-be-around-to-sell-stuff-to/")
